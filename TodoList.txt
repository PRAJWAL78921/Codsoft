import tkinter as tk
import random
import string

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")

        self.heading_label = tk.Label(root, text="Password Generator", font=("Helvetica", 16, "bold"))
        self.heading_label.grid(row=0, column=1, columnspan=2, pady=10)

        self.username_label = tk.Label(root, text="Enter user name:")
        self.username_label.grid(row=1, column=0, padx=5, sticky="e")

        self.username_entry = tk.Entry(root)
        self.username_entry.grid(row=1, column=1, padx=5, sticky="w")

        self.length_label = tk.Label(root, text="Enter password length:")
        self.length_label.grid(row=2, column=0, padx=5, sticky="e")

        self.length_entry = tk.Entry(root)
        self.length_entry.grid(row=2, column=1, padx=5, sticky="w")

        self.generated_label = tk.Label(root, text="Generated password:")
        self.generated_label.grid(row=3, column=0, padx=5, sticky="e")

        self.generated_password = tk.Label(root, text="")
        self.generated_password.grid(row=3, column=1, padx=5, sticky="w")

        self.generate_button = tk.Button(root, text="GENERATE PASSWORD", command=self.generate_password)
        self.generate_button.grid(row=4, column=1, pady=10, sticky="w")

        self.button_frame = tk.Frame(root)
        self.button_frame.grid(row=5, column=1, pady=5, sticky="e")

        self.accept_button = tk.Button(self.button_frame, text="ACCEPT", command=self.accept_input)
        self.accept_button.pack(side=tk.LEFT, padx=5)

        self.reset_button = tk.Button(self.button_frame, text="RESET", command=self.reset_input)
        self.reset_button.pack(side=tk.LEFT, padx=5)

    def accept_input(self):
        self.username_entry.config(state=tk.DISABLED)
        self.length_entry.config(state=tk.DISABLED)
        self.accept_button.config(state=tk.DISABLED)
        self.generate_button.config(state=tk.NORMAL)

    def generate_password(self):
        try:
            username = self.username_entry.get()
            length = int(self.length_entry.get())

            if length <= 0:
                self.generated_password.config(text="Invalid Length")
            else:
                characters = string.ascii_letters + string.digits + string.punctuation
                password = ''.join(random.choice(characters) for _ in range(length))

                if username:
                    password_with_username = username + password
                    self.generated_password.config(text=password_with_username)
                else:
                    self.generated_password.config(text=password)
        except ValueError:
            self.generated_password.config(text="Invalid Length")

    def reset_input(self):
        self.username_entry.config(state=tk.NORMAL)
        self.length_entry.config(state=tk.NORMAL)
        self.accept_button.config(state=tk.NORMAL)
        self.generate_button.config(state=tk.DISABLED)
        self.username_entry.delete(0, tk.END)
        self.length_entry.delete(0, tk.END)
        self.generated_password.config(text="")

def main():
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
